{"name":"Gracia","tagline":"","body":"Gracia\r\n----------\r\nGracia is a quick library to create and manage images with php.\r\n\r\nThis library can be used only to create or manage **empty** images. GraciaJPG and GraciaPNG are coming soon :-).\r\n\r\n**Last stable version : 0.2.7**\r\n\r\nLicense\r\n----------\r\nAuthor : Elyas Kamel (Hirokoshi)\r\n\r\nContact : hirokoshi@gw2.fr - melyasfa@gmail.com\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n \r\n This program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU General Public License for more details.\r\n\r\n You should have received a copy of the GNU General Public License\r\nalong with this program. If not, see <http://www.gnu.org/licenses/>.\r\n\r\nDoc\r\n----------\r\n###Constructor\r\n`__construct(string $name, int $x, int, string $bgcolor = null)`\r\n\r\nThe constructor creates an empty picture with a *name*, *x* width and *y* height. The *bgcolor* parameter is optionnal.\r\n\r\n######Example\r\n`$obj = new Gracia(\"myPicture\", 350, 150, \"#7F7F7F\");`\r\n\r\n###colorize\r\n`colorize(string $colorName, int alpha)`\r\n\r\nApplies the \"colorize\" filter to the image.\r\n\r\n###createThumbnail\r\n`createThumbnail(string $thumb_name);`\r\n\r\nThis method creates a thumbnail from the current image and saves it in *thumb_name*. The thumbnail's proportions are calculated automatically.\r\n\r\n######Example\r\n`$obj->createThumbnail('img/thumb_picture'); //creates a thumbnail \"thumb_picture.png\" in the img folder`\r\n\r\n###drawRightTriangle\r\n`drawRightTriangle(int $adjacent_side, int $opposite_side, int $x, int $y, string $colorName, int $density = 1)`\r\n\r\nDraws a right triangle.\r\n\r\n######Example\r\n`$obj->drawRightTriangle(125, 125, 150, 140, 'black', 3); //draws a black right triangle`\r\n\r\n\r\n###drawPolygon\r\n`drawPolygon(array $vals, string $colorName, int $density = 2)`\r\n\r\nDraws a polygon. The parameter *vals* is an array which determines the coordinates of the polygon.\r\n\r\n######Example\r\n\r\n    $coords = array(\r\n        array(20, 100), array(100, 100), array(20, 30), array(100, 30)\r\n    );\r\n\r\n    $obj->drawPolygon($coords, 'black', 2);\r\n\r\n\r\n###fusion\r\n`fusion(string $file_path, int $x, int $y, int $op)`\r\n\r\nThis method merges the current picture with another image. *file_path* is the path of the target image, *(x,y)* is the merge position and *op* is the opacity of the target image.\r\n\r\n######Example\r\n`$obj->fusion('img/anotherpicture.jpg', 30, 50, 50); //merge the current img with anotherpicture.png with 50% opacity`\r\n\r\n###negate\r\n`negate()`\r\n\r\nReverse the colors of the image.\r\n\r\n###pixelise\r\n`pixelise()`\r\n\r\nPixelise the image.\r\n\r\n###resize\r\n`resize(int $w, $int $h)`\r\n\r\nThis method resizes the current image. *w* is the new width and *h* is the new height.\r\n\r\n######Example\r\n`$obj->resize(300, 100);`\r\n\r\n###rotate\r\n`rotate(double $angle)`\r\n\r\nRotate the picture using *angle* parameter in degrees.\r\n\r\n######Example\r\n`$obj->rotate(180);`\r\n\r\n###save\r\n`save(string $path_name)`\r\n\r\nSaves the image into *path_name*.\r\n\r\n######Example\r\n`$obj->save('img/mypicture'); //saves the image into img/mypicture.png`\r\n\r\n###setBackground\r\n`setBackground(string $colorName)`\r\n\r\nThis method sets a background to the picture. The hexadecimal color code / color name of the background is defined in *colorName* parameter.\r\n\r\n######Example\r\n`\r\n$obj->setBackground(\"yellow\"); //sets a black background to the picture\r\n`\r\n###setBorder\r\n`setBorder(string $colorName, int $border_pxl = 1)`\r\n\r\nSets a border to the image. *colorName* parameter is the hexadecimal color / color name of the border and *border_pxl* is the density of the border.\r\n\r\n######Example\r\n`$obj->setBorder('#000', 5); //black border with 5px density`\r\n\r\n###setContrast\r\n`setContrast(int $constrast = 1)`\r\n\r\nModify the contrast of the image. The value of the contrast must be between 1 and 100.\r\n\r\n######Example\r\n`$obj->setContrast(56);`\r\n\r\n###setFont\r\n`setFont(string $path)`\r\n\r\nSets a special font to the text.\r\n\r\n######Example\r\n`$obj->setFont('fonts/myfont.ttf');`\r\n\r\n###setLine\r\n`setLine(int $x1, int $y1, int $x2, int $y2, string $colorName, int $density_pxl = 1, string $style)`\r\n\r\nDraws a line in the picture between *(x1, y1)* and *(x2, y2)* with *density_pxl* density and *style* style (dotted, solid). *colorName* is the hexadecimal color code or color name.\r\n\r\n######Example\r\n`$obj->setLine(120, 40, 220, 40, \"purple\");`\r\n\r\n###setName\r\n`setName(string $new_name)`\r\n\r\nSets a new name to the picture.\r\n\r\n###setPixel\r\n`setPixel(int $x, int $y, string $colorName)`\r\n\r\nDraws a pixel in *(x,y)* pos in the picture. The hexadecimal color / color name of the pixel is defined in *colorName* parameter.\r\n\r\n######Example\r\n`\r\n$obj->setPixel(50, 50, 'black\");\r\n`\r\n\r\n###setText\r\n`setText(int $size, int $x, int $y, string $text, string $colorName)`\r\n\r\nThis method sets a text to the picture with *size, x position, y position, the label of the text and the hexadecimal code or color name*.\r\n\r\n######Example\r\n`\r\n$obj->setText(14, 120, 30, \"Hello world!\", \"darkgreen\"); //write \"Hello world\" in the picture\r\n`\r\n\r\n#####setTransparent\r\n`setTransparent()`\r\n\r\nSets the picture transparent.\r\n\r\n###setTtfText\r\n`setTtfText(int $size, int $x, int $y, string $text, string $colorName)`\r\n\r\nThis method sets a *specific* text to the picture with *size, x position, y position, the label of the text and the color name.\r\n\r\n**Note : to use this method, you must set a specific font with setFont**.\r\n\r\n###show_img\r\n\r\nShows the image.\r\n\r\n###smooth\r\n`smooth(double $smooth_level)`\r\n\r\nMakes the image smoother.\r\n\r\n######Example\r\n`$obj->smooth(56)`\r\n\r\nStyles\r\n----------\r\nThe following styles can be used only with setLine method **for the moment** :\r\n\r\n- solid\r\n\r\n- dotted\r\n\r\n- double\r\n\r\nColors legend\r\n----------\r\nThere are some colors predefined in Gracia. Here's the list with RGB format :\r\n\r\n*black*         => 0-0-0\r\n\r\n*white*         => 255-255-255\r\n\r\n*blue*          => 0-0-255\r\n\r\n*yellow*        => 255-255-0\r\n\r\n*gray*          => 190-190-190\r\n\r\n*brown*         => 165-42-42\r\n\r\n*red*           => 255-0-0\r\n\r\n*purple*        => 160-32-240\r\n\r\n*snow*          => 255-250-255\r\n\r\n*antiquewhite*  => 250-235-215\r\n\r\n*lightgray*     => 211-211-211\r\n\r\n*midnightblue*  => 25-25-112\r\n\r\n*royalblue*     => 65-105-225\r\n\r\n*steelblue*     => 70-130-180\r\n\r\n*lightblue*     => 173-216-230\r\n\r\n*turquoise*     => 64-224-208\r\n\r\n*cyan*          => 0-255-255\r\n\r\n*cadetblue*     => 95-158-160\r\n\r\n*darkgreen*     => 0-100-0\r\n\r\n*darkolivegreen*=> 85-107-47\r\n\r\n*greenyellow*   => 173-255-47\r\n\r\n*khaki*         => 240-230-140\r\n\r\n*gold*          => 255-215-0\r\n\r\n*beige*         => 245-245-220\r\n\r\n*orange*        => 255-165-0\r\n\r\n*salmon*        => 250-128-114\r\n\r\n*darkorange*    => 255-140-0\r\n\r\n*orangered*     => 255-69-0\r\n\r\n*pink*          => 255-192-203\r\n\r\n*violet*        => 238-130-238\r\n\r\n*darkviolet*    => 148-0-211","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}